pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9'
        jdk 'jdk'
        nodejs 'njs'
    }

    environment {
        JAVA_HOME = "${tool 'jdk'}"
        PATH = "${tool 'njs'}/bin:${env.JAVA_HOME}/bin:${env.PATH}"
        SONARQUBE_URL = 'http://172.18.0.3:9000'
        SONARQUBE_TOKEN = credentials('sonar-token')
        DOCKER_IMAGE = 'julio/app-init'
        DOCKER_TAG = 'latest'

        FRONTEND_ARTIFACT_PATH = 'Front-End/frontend.tar.gz'
        FRONTEND_ARTIFACT_ID = 'issuetracking-frontend'
        FRONTEND_GROUP_ID = 'com.ismail.frontend'
        FRONTEND_VERSION = '0.0.1'
        FRONTEND_PACKAGING = 'tar.gz'
    }

    stages {

        stage('Checkout') {
            steps {
                git url: 'https://github.com/Julio-dev-e/CICD.git', branch: 'main'
            }
        }

        stage('Extract Maven Info') {
            steps {
                dir('Back-End') {
                    script {
                        env.GROUP_ID    = sh(script: "mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout", returnStdout: true).trim()
                        env.ARTIFACT_ID = sh(script: "mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout", returnStdout: true).trim()
                        env.VERSION     = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
                        env.PACKAGING   = sh(script: "mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout", returnStdout: true).trim()
                        env.ARTIFACT_PATH = "target/${env.ARTIFACT_ID}-${env.VERSION}.${env.PACKAGING}"
                    }
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('Back-End') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('Front-End') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarqube') {
                        dir('Back-End') {
                            sh """
                                mvn sonar:sonar \
                                -Dsonar.projectKey=${env.ARTIFACT_ID}-backend \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                            """
                        }

                        dir('Front-End') {
                            sh """
                                curl -sSLo sonar.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                                unzip -qo sonar.zip
                                chmod +x sonar-scanner-*/bin/sonar-scanner
                                ./sonar-scanner-*/bin/sonar-scanner \
                                    -Dsonar.projectKey=${env.ARTIFACT_ID}-frontend \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONARQUBE_URL} \
                                    -Dsonar.login=${SONARQUBE_TOKEN}
                                rm -rf sonar.zip sonar-scanner-*/
                            """
                        }
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'Back-End/target/*.jar', fingerprint: true
            }
        }

        stage('Upload Backend to Nexus') {
            steps {
                dir('Back-End') {
                    script {
                        if (fileExists(env.ARTIFACT_PATH)) {
                            nexusArtifactUploader(
                                nexusVersion: 'nexus3',
                                protocol: 'http',
                                nexusUrl: 'nexus:8081',
                                groupId: env.GROUP_ID,
                                version: env.VERSION,
                                repository: 'maven-snapshots',
                                credentialsId: 'NexusUserCreds',
                                artifacts: [[
                                    artifactId: env.ARTIFACT_ID,
                                    classifier: '',
                                    file: env.ARTIFACT_PATH,
                                    type: env.PACKAGING
                                ]]
                            )
                        } else {
                            error "El artefacto no fue encontrado: ${env.ARTIFACT_PATH}"
                        }
                    }
                }
            }
        }

        // ðŸ”§ MODIFICADO: PublicaciÃ³n frontend sin campo "private" y sin interpolaciÃ³n insegura
        stage('Publish Frontend to Nexus (npm)') {
            steps {
                dir('Front-End') {
                    withCredentials([usernamePassword(credentialsId: 'NexusUserCreds', usernameVariable: 'NPM_USER', passwordVariable: 'NPM_PASS')]) {
                        script {
                            sh '''
                                # Eliminar campo "private" del package.json
                                jq 'del(.private)' package.json > tmp.json && mv tmp.json package.json

                                # Crear archivo de configuraciÃ³n .npmrc
                                echo "//nexus:8081/repository/front-repo/:username=${NPM_USER}" > ~/.npmrc
                                echo "//nexus:8081/repository/front-repo/:_password=$(echo -n $NPM_PASS | base64)" >> ~/.npmrc
                                echo "//nexus:8081/repository/front-repo/:email=admin@example.com" >> ~/.npmrc
                                echo "//nexus:8081/repository/front-repo/:always-auth=true" >> ~/.npmrc

                                # Establecer el registro y publicar
                                npm config set registry http://nexus:8081/repository/front-repo/
                                npm publish --registry=http://nexus:8081/repository/front-repo/
                            '''
                        }
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir('Back-End') {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker logout
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Desplegando contenedor...'
                sh """
                    docker stop app-init || true
                    docker rm app-init || true
                    docker run -d --name app-init -p 8080:8080 ${DOCKER_IMAGE}:${DOCKER_TAG}
                """
            }
        }
    }

    post {
        success {
            echo ' Pipeline completado con Ã©xito'
        }
        failure {
            echo ' Pipeline fallido'
        }
    }
}