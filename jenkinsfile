pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9'
        jdk 'jdk'
        nodejs 'njs'
    }

    environment {
        JAVA_HOME = "${tool 'jdk'}"
        PATH = "${tool 'njs'}/bin:${env.JAVA_HOME}/bin:${env.PATH}"
        SONARQUBE_URL = 'http://172.18.0.3:9000'
        SONARQUBE_TOKEN = credentials('sonar-token')
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Julio-dev-e/CICD.git', branch: 'main'
            }
        }

        stage('Build Backend') {
            steps {
                dir('Back-End') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('Front-End') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    // Análisis del Backend con Maven y SonarQube
                    withSonarQubeEnv('SonarQube') {
                        dir('Back-End') {
                            sh '''
                                mvn sonar:sonar \
                                -Dsonar.projectKey=nombre-del-proyecto-backend \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                            '''
                        }
                    }

                    // Análisis del Frontend con sonar-scanner descargado y ejecutado correctamente
                    withSonarQubeEnv('SonarQube') {
                        dir('Front-End') {
                            sh '''
                                curl -sSLo sonar.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                                unzip -qo sonar.zip
                                chmod +x sonar-scanner-*/bin/sonar-scanner
                                ./sonar-scanner-*/bin/sonar-scanner \
                                    -Dsonar.projectKey=nombre-del-proyecto-frontend \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONARQUBE_URL} \
                                    -Dsonar.login=${SONARQUBE_TOKEN}
                                rm -rf sonar.zip sonar-scanner-*/
                            '''
                        }
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'Back-End/target/*.jar', fingerprint: true
            }
        }

        stage('Docker Build') {
            steps {
                echo 'Construcción de imagen Docker'
            }
        }

        stage('Docker Push') {
            steps {
                echo 'Subida a Docker Hub o Nexus'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Despliegue'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completado con éxito'
        }
        failure {
            echo 'Pipeline fallido'
        }
    }
}
